{
  "access_type": "PRIVATE",
  "action_description": null,
  "action_name": null,
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "File",
            "id": "File-AjTue",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "SplitText-XF6tW",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-File-AjTue{œdataTypeœ:œFileœ,œidœ:œFile-AjTueœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-XF6tW{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-XF6tWœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "File-AjTue",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-AjTueœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SplitText-XF6tW",
        "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-XF6tWœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OllamaEmbeddings",
            "id": "OllamaEmbeddings-kHIte",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "QdrantVectorStoreComponent-MVkQJ",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OllamaEmbeddings-kHIte{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-kHIteœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-QdrantVectorStoreComponent-MVkQJ{œfieldNameœ:œembeddingœ,œidœ:œQdrantVectorStoreComponent-MVkQJœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OllamaEmbeddings-kHIte",
        "sourceHandle": "{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-kHIteœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "QdrantVectorStoreComponent-MVkQJ",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œQdrantVectorStoreComponent-MVkQJœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SplitText",
            "id": "SplitText-XF6tW",
            "name": "chunks",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "QdrantVectorStoreComponent-MVkQJ",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-SplitText-XF6tW{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-XF6tWœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-QdrantVectorStoreComponent-MVkQJ{œfieldNameœ:œingest_dataœ,œidœ:œQdrantVectorStoreComponent-MVkQJœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SplitText-XF6tW",
        "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-XF6tWœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
        "target": "QdrantVectorStoreComponent-MVkQJ",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œQdrantVectorStoreComponent-MVkQJœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "OllamaEmbeddings-kHIte",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using Ollama models.",
            "display_name": "Ollama Embeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
            "edited": false,
            "field_order": [
              "model_name",
              "base_url"
            ],
            "frozen": false,
            "icon": "Ollama",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "hidden": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "options": null,
                "required_inputs": null,
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "base_url": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Ollama Base URL",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "base_url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "http://localhost:11434"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import OllamaEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_EMBEDDING_MODELS, URL_LIST\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, MessageTextInput, Output\n\nHTTP_STATUS_OK = 200\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n    name = \"OllamaEmbeddings\"\n\n    inputs = [\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Ollama Model\",\n            value=\"\",\n            options=[],\n            real_time_refresh=True,\n            refresh_button=True,\n            combobox=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"\",\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(model=self.model_name, base_url=self.base_url)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n        return output\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name in {\"base_url\", \"model_name\"} and not await self.is_valid_ollama_url(field_value):\n            # Check if any URL in the list is valid\n            valid_url = \"\"\n            for url in URL_LIST:\n                if await self.is_valid_ollama_url(url):\n                    valid_url = url\n                    break\n            build_config[\"base_url\"][\"value\"] = valid_url\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                build_config[\"model_name\"][\"options\"] = await self.get_model(self.base_url)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                build_config[\"model_name\"][\"options\"] = await self.get_model(build_config[\"base_url\"].get(\"value\", \"\"))\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n\n        return build_config\n\n    async def get_model(self, base_url_value: str) -> list[str]:\n        \"\"\"Get the model names from Ollama.\"\"\"\n        model_ids = []\n        try:\n            url = urljoin(base_url_value, \"/api/tags\")\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n            model_ids = [model[\"name\"] for model in data.get(\"models\", [])]\n            # this to ensure that not embedding models are included.\n            # not even the base models since models can have 1b 2b etc\n            # handles cases when embeddings models have tags like :latest - etc.\n            model_ids = [\n                model\n                for model in model_ids\n                if any(model.startswith(f\"{embedding_model}\") for embedding_model in OLLAMA_EMBEDDING_MODELS)\n            ]\n\n        except (ImportError, ValueError, httpx.RequestError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return model_ids\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(f\"{url}/api/tags\")).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n"
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Ollama Model",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "nomic-embed-text:latest"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "nomic-embed-text:latest"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OllamaEmbeddings"
        },
        "dragging": false,
        "id": "OllamaEmbeddings-kHIte",
        "measured": {
          "height": 309,
          "width": 320
        },
        "position": {
          "x": 1173.937550283946,
          "y": 979.2510483070862
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "File-AjTue",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": false,
            "category": "data",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Load a file to be used in your project.",
            "display_name": "File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "path",
              "file_path",
              "separator",
              "silent_errors",
              "delete_server_file_after_processing",
              "ignore_unsupported_extensions",
              "ignore_unspecified_files",
              "use_multithreading",
              "concurrency_multithreading"
            ],
            "frozen": false,
            "icon": "file-text",
            "key": "File",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "load_files",
                "name": "data",
                "required_inputs": [],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "method": "load_dataframe",
                "name": "dataframe",
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "load_message",
                "name": "message",
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0004124940109183525,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data import BaseFileComponent\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parallel_load_data, parse_text_file_to_data\nfrom langflow.io import BoolInput, IntInput\nfrom langflow.schema import Data\n\n\nclass FileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of individual or zipped text files.\n\n    This component supports processing multiple valid files within a zip archive,\n    resolving paths, validating file types, and optionally using multithreading for processing.\n    \"\"\"\n\n    display_name = \"File\"\n    description = \"Load a file to be used in your project.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    VALID_EXTENSIONS = TEXT_FILE_TYPES\n\n    inputs = [\n        *BaseFileComponent._base_inputs,\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Processes files either sequentially or in parallel, depending on concurrency settings.\n\n        Args:\n            file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\n        Returns:\n            list[BaseFileComponent.BaseFile]: Updated list of files with merged data.\n        \"\"\"\n\n        def process_file(file_path: str, *, silent_errors: bool = False) -> Data | None:\n            \"\"\"Processes a single file and returns its Data object.\"\"\"\n            try:\n                return parse_text_file_to_data(file_path, silent_errors=silent_errors)\n            except FileNotFoundError as e:\n                msg = f\"File not found: {file_path}. Error: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n            except Exception as e:\n                msg = f\"Unexpected error processing {file_path}: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = 1 if not self.use_multithreading else max(1, self.concurrency_multithreading)\n        file_count = len(file_list)\n\n        parallel_processing_threshold = 2\n        if concurrency < parallel_processing_threshold or file_count < parallel_processing_threshold:\n            if file_count > 1:\n                self.log(f\"Processing {file_count} files sequentially.\")\n            processed_data = [process_file(str(file.path), silent_errors=self.silent_errors) for file in file_list]\n        else:\n            self.log(f\"Starting parallel processing of {file_count} files with concurrency: {concurrency}.\")\n            file_paths = [str(file.path) for file in file_list]\n            processed_data = parallel_load_data(\n                file_paths,\n                silent_errors=self.silent_errors,\n                load_function=process_file,\n                max_concurrency=concurrency,\n            )\n\n        # Use rollup_basefile_data to merge processed data with BaseFile objects\n        return self.rollup_data(file_list, processed_data)\n"
              },
              "concurrency_multithreading": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Processing Concurrency",
                "dynamic": false,
                "info": "When multiple files are being processed, the number of files to process concurrently.",
                "list": false,
                "list_add_label": "Add More",
                "name": "concurrency_multithreading",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "delete_server_file_after_processing": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Delete Server File After Processing",
                "dynamic": false,
                "info": "If true, the Server File Path will be deleted after processing.",
                "list": false,
                "list_add_label": "Add More",
                "name": "delete_server_file_after_processing",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "file_path": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "Server File Path",
                "dynamic": false,
                "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                "input_types": [
                  "Data",
                  "Message"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "file_path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "ignore_unspecified_files": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Unspecified Files",
                "dynamic": false,
                "info": "If true, Data with no 'file_path' property will be ignored.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_unspecified_files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ignore_unsupported_extensions": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Unsupported Extensions",
                "dynamic": false,
                "info": "If true, files with unsupported extensions will not be processed.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_unsupported_extensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "path": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "zip",
                  "tar",
                  "tgz",
                  "bz2",
                  "gz"
                ],
                "file_path": [
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/5fe9d699-b7ca-4a16-aec7-7d588971d239.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/c1eec3ef-a8bc-430c-aae1-e95486dd1af3.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1d64d335-d992-4413-b8a9-d3866a571622.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/773e7cb2-be84-4baa-992f-b9e795fabdee.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/a5e727c4-ef8b-4e75-8634-9818867810b6.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/c98bc2ab-b97e-4112-ac34-3c1f29c9a22b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/d5eb6478-21e9-4d0f-8973-f564f08c9f6c.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/6aad1321-af50-4739-8ef4-4e5bf3e51d62.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/33d2a64c-4aac-402e-99a9-ec734b4c3f64.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/804fff3a-8f88-4f65-bdae-fafcd90bdbdc.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/18b862c7-484e-4ed4-8d95-a859c8972936.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/2754ec4e-40d8-4c1a-802e-41ae18acfb45.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/92677cfa-734e-4000-95c4-b3b8e905c57b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/e04c7815-bcb0-49b4-8b12-7554022389ef.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/fefb7603-647f-4abb-9282-02a81e0e7929.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1eb00007-2685-4c4d-949d-df6b2e573c81.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/6f425d51-a244-41e5-82e0-87dae5e97cea.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/fc5fef4d-8ef3-4383-a40f-e5fe39421f7b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/67f7c7a4-a637-40a9-ac2d-454db5a21f0b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/88778bd1-db28-48f5-9966-ca718aa861b8.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/4975e426-633d-4e75-a9da-5371b669e0ef.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/290d6086-72b9-4ba2-ac8e-3e817bd15087.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/35cb5a7c-3e19-414a-8b86-0ed963a74265.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/69e056fa-f441-42d9-9b4d-a4e5481325c1.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/9ff4b31b-7f1b-48b6-b3da-a04141d744fa.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/307a12ac-410e-4cde-a8e3-69ff3f87d563.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/17070ba0-6550-43eb-a245-a1f2fa4ff142.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/8f233dec-5d70-43d6-ae3e-1c2159cf9ee5.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/307c6f42-ae4a-4817-aab3-790432a2d2a7.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/fd357377-fb68-464d-bbbd-de4a8206c68d.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/27a802cb-df11-4786-bc5d-4424c28e467d.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/f47c5af2-8d97-4105-82da-c8b195d65fe0.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/d7ca7829-5cda-455d-9260-a4c6f0ebdc03.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/7a29b57b-3f9e-47c2-b486-9d1b763ff6d1.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/bdda73f6-1767-4bed-b1cb-8880ba47fa0c.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/18e5af0b-f188-4deb-806c-caefeb8bd78e.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/14f02bb8-8d2e-4cd0-8eb2-2c44e998a676.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/66ab1886-9412-44a8-a416-6b5cddbd055c.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/26d0037b-c8d5-40a6-a30b-97078cd8315d.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/cfd7ff2c-df36-4b23-804a-4dcd340b0cb7.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/38ced51b-d0a8-459c-9503-367a18cd0c80.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/3fc228a5-59c6-4abc-ace1-68905d3ed143.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/974f3f17-31d7-41e8-b29f-68828769d917.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/a02315b6-acb0-40b0-aefc-bdee19f4fdaa.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/2a15ba37-e81d-4528-9ff0-71bcd525f626.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/5c0db979-14e3-4ff1-9a34-555864ad9074.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/7a601a14-874b-4584-9ce2-8199a66021a9.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/2453690c-3e52-4527-bf63-29d34f6dea2b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/0ec87c31-36a1-4594-a5f1-cfc98eb70a3b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/a862f2de-6f06-44fd-a54c-39611f6f027d.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/672edb75-5290-4ec3-9db4-5ba249cdfbbd.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/63d6a2ce-0405-4114-b642-93c19b28d997.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/8984a179-6f89-4933-9b26-73ce10ff8799.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1a52d391-6d55-408d-acec-3cd6fff9d680.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1ac6ebe4-5824-4714-9c76-c83f8012dcd4.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1bca88e9-dedc-44e9-97a3-41bd8d803a93.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/9c12e2e7-b982-4ea5-9129-0d8391e74431.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/9aad802d-7a41-463f-9925-c8fc1539327b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/625f3c11-6882-4c79-8880-dd7b025c7df1.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1613c799-888c-4512-bccc-993d5e0189ed.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/6c795393-a32b-4ba5-b1ec-c4fd3a810f2b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/486d18e3-6ed1-40c2-94a1-b0abe1433af6.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/714f6b4d-583a-4293-b062-a9d93d61e80c.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/3331b1eb-e679-4999-a856-065150a60e04.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/9d4f2972-ff11-4f73-90cf-6a01c3529af5.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/544f9bfe-1089-4de1-bc5c-f4eb1c9a0e06.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/2134cd22-69d0-4ad5-a0d3-d944c6893274.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/20bf2c34-ddf9-469e-a4ab-d3e8d22a9961.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/eafcc655-4b69-4ce5-8bb2-bcc0d0f4b86d.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/b1afbc3d-ac03-44a0-bef5-46010b31560b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/a9a911f5-55c9-46f5-9a8b-135f49b421e2.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/77fef9dc-0b83-4229-979e-46f0c9431a22.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/f4d7f729-65cf-45cd-a6e7-fcd792d852c6.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/cd71f97f-bfc1-474a-a5db-3ca1cf0ce7e3.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/51cd7c2c-5752-4e8f-933b-18b4aa3f3cac.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/af391389-ce34-4f54-b369-f60acc13a2a5.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/700f6f75-94cb-48ae-b895-0bd5e3ea809f.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/7aebc8df-7db9-45e3-9e63-a3c85036604e.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/7cfe633d-5288-4b1e-821f-6d84117f739c.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/1f32a737-3092-45c8-a098-33e13ac6641b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/64bc5fd3-e7a6-4dfe-a29b-56f2238629f5.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/b7d44586-28e5-4206-9ef6-42574a880a66.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/a793ca05-7f27-4517-b31a-5a781aeef5da.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/62160c80-63d3-4089-8748-67176eb022e6.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/609861c4-5c3c-4e58-8985-b3c6e7ef60f8.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/58cc0b2f-656e-456b-85f6-ffb06a12dbdb.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/b2cfe8bf-1dd3-42aa-9095-9d39379153b7.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/11eccc91-5cec-48fe-9c99-fe95c8ff5104.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/b69a7d57-7de0-40ec-ac80-cbde887ef164.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/d4ba621a-675c-4719-bc59-4d5081fb9e97.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/5d4f1a42-5d7e-46b3-95a2-a333928234c4.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/b0097761-d7f0-4b27-8b1d-e44eb1770b0b.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/32c0401a-ed07-4959-95a5-5e8efee8d67c.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/a2ad911a-ac2d-4322-bc8f-fc5c345442e1.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/29c90e49-76ae-4860-828f-4842a7cb7b50.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/89d32ab9-5ea6-4481-803c-235a09ceb4e8.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/608d52ee-337d-4ca9-b397-e1afaf8b4c06.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/699206e0-63dd-4429-8766-1572d51af48e.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/2869b641-8e78-4047-a19c-311aec7354b8.txt",
                  "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10/640c7b47-63e9-4c8b-8277-00b45f706b24.txt"
                ],
                "info": "Supported file extensions: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx; optionally bundled in file extensions: zip, tar, tgz, bz2, gz",
                "list": true,
                "list_add_label": "Add More",
                "name": "path",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "separator": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "Specify the separator to use between multiple outputs in Message format.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n\n"
              },
              "silent_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "list_add_label": "Add More",
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "use_multithreading": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "[Deprecated] Use Multithreading",
                "dynamic": false,
                "info": "Set 'Processing Concurrency' greater than 1 to enable multithreading.",
                "list": false,
                "list_add_label": "Add More",
                "name": "use_multithreading",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "File"
        },
        "id": "File-AjTue",
        "measured": {
          "height": 4694,
          "width": 320
        },
        "position": {
          "x": 673,
          "y": 331.00000000000006
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "SplitText-XF6tW",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Split text into chunks based on specified criteria.",
            "display_name": "Split Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "data_inputs",
              "chunk_overlap",
              "chunk_size",
              "separator",
              "text_key",
              "keep_separator"
            ],
            "frozen": false,
            "icon": "scissors-line-dashed",
            "key": "SplitText",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chunks",
                "hidden": false,
                "method": "split_text",
                "name": "chunks",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "method": "as_dataframe",
                "name": "dataframe",
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0006561452663029057,
            "template": {
              "_type": "Component",
              "chunk_overlap": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Chunk Overlap",
                "dynamic": false,
                "info": "Number of characters to overlap between chunks.",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunk_overlap",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 200
              },
              "chunk_size": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "The maximum length of each chunk. Text is first split by separator, then chunks are merged up to this size. Individual splits larger than this won't be further divided.",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_text_splitters import CharacterTextSplitter\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, HandleInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data, DataFrame\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data or DataFrame\",\n            info=\"The data with texts to split in chunks.\",\n            input_types=[\"Data\", \"DataFrame\"],\n            required=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=(\n                \"The maximum length of each chunk. Text is first split by separator, \"\n                \"then chunks are merged up to this size. \"\n                \"Individual splits larger than this won't be further divided.\"\n            ),\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=(\n                \"The character to split on. Use \\\\n for newline. \"\n                \"Examples: \\\\n\\\\n for paragraphs, \\\\n for lines, . for sentences\"\n            ),\n            value=\"\\n\",\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"The key to use for the text column.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"keep_separator\",\n            display_name=\"Keep Separator\",\n            info=\"Whether to keep the separator in the output chunks and where to place it.\",\n            options=[\"False\", \"True\", \"Start\", \"End\"],\n            value=\"False\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def _docs_to_data(self, docs) -> list[Data]:\n        return [Data(text=doc.page_content, data=doc.metadata) for doc in docs]\n\n    def _fix_separator(self, separator: str) -> str:\n        \"\"\"Fix common separator issues and convert to proper format.\"\"\"\n        if separator == \"/n\":\n            return \"\\n\"\n        if separator == \"/t\":\n            return \"\\t\"\n        return separator\n\n    def split_text_base(self):\n        separator = self._fix_separator(self.separator)\n        separator = unescape_string(separator)\n\n        if isinstance(self.data_inputs, DataFrame):\n            if not len(self.data_inputs):\n                msg = \"DataFrame is empty\"\n                raise TypeError(msg)\n\n            self.data_inputs.text_key = self.text_key\n            try:\n                documents = self.data_inputs.to_lc_documents()\n            except Exception as e:\n                msg = f\"Error converting DataFrame to documents: {e}\"\n                raise TypeError(msg) from e\n        else:\n            if not self.data_inputs:\n                msg = \"No data inputs provided\"\n                raise TypeError(msg)\n\n            documents = []\n            if isinstance(self.data_inputs, Data):\n                self.data_inputs.text_key = self.text_key\n                documents = [self.data_inputs.to_lc_document()]\n            else:\n                try:\n                    documents = [input_.to_lc_document() for input_ in self.data_inputs if isinstance(input_, Data)]\n                    if not documents:\n                        msg = f\"No valid Data inputs found in {type(self.data_inputs)}\"\n                        raise TypeError(msg)\n                except AttributeError as e:\n                    msg = f\"Invalid input type in collection: {e}\"\n                    raise TypeError(msg) from e\n        try:\n            # Convert string 'False'/'True' to boolean\n            keep_sep = self.keep_separator\n            if isinstance(keep_sep, str):\n                if keep_sep.lower() == \"false\":\n                    keep_sep = False\n                elif keep_sep.lower() == \"true\":\n                    keep_sep = True\n                # 'start' and 'end' are kept as strings\n\n            splitter = CharacterTextSplitter(\n                chunk_overlap=self.chunk_overlap,\n                chunk_size=self.chunk_size,\n                separator=separator,\n                keep_separator=keep_sep,\n            )\n            return splitter.split_documents(documents)\n        except Exception as e:\n            msg = f\"Error splitting text: {e}\"\n            raise TypeError(msg) from e\n\n    def split_text(self) -> list[Data]:\n        return self._docs_to_data(self.split_text_base())\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.split_text())\n"
              },
              "data_inputs": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "The data with texts to split in chunks.",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "data_inputs",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "keep_separator": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Keep Separator",
                "dynamic": false,
                "info": "Whether to keep the separator in the output chunks and where to place it.",
                "name": "keep_separator",
                "options": [
                  "False",
                  "True",
                  "Start",
                  "End"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "False"
              },
              "separator": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Separator",
                "dynamic": false,
                "info": "The character to split on. Use \\n for newline. Examples: \\n\\n for paragraphs, \\n for lines, . for sentences",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "text_key": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Key",
                "dynamic": false,
                "info": "The key to use for the text column.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_key",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SplitText"
        },
        "id": "SplitText-XF6tW",
        "measured": {
          "height": 503,
          "width": 320
        },
        "position": {
          "x": 1191.350546906451,
          "y": 336.5847472058038
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "QdrantVectorStoreComponent-MVkQJ",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "category": "vectorstores",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Qdrant Vector Store with search capabilities",
            "display_name": "Qdrant",
            "documentation": "",
            "edited": false,
            "field_order": [
              "collection_name",
              "host",
              "port",
              "grpc_port",
              "api_key",
              "prefix",
              "timeout",
              "path",
              "url",
              "distance_func",
              "content_payload_key",
              "metadata_payload_key",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "embedding",
              "number_of_results"
            ],
            "frozen": false,
            "icon": "Qdrant",
            "key": "QdrantVectorStoreComponent",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Search Results",
                "method": "search_documents",
                "name": "search_results",
                "required_inputs": [
                  "collection_name"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "method": "as_dataframe",
                "name": "dataframe",
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001527566058238073,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": true,
                "display_name": "API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain.embeddings.base import Embeddings\nfrom langchain_community.vectorstores import Qdrant\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass QdrantVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Qdrant\"\n    description = \"Qdrant Vector Store with search capabilities\"\n    icon = \"Qdrant\"\n\n    inputs = [\n        StrInput(name=\"collection_name\", display_name=\"Collection Name\", required=True),\n        StrInput(name=\"host\", display_name=\"Host\", value=\"localhost\", advanced=True),\n        IntInput(name=\"port\", display_name=\"Port\", value=6333, advanced=True),\n        IntInput(name=\"grpc_port\", display_name=\"gRPC Port\", value=6334, advanced=True),\n        SecretStrInput(name=\"api_key\", display_name=\"API Key\", advanced=True),\n        StrInput(name=\"prefix\", display_name=\"Prefix\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", advanced=True),\n        StrInput(name=\"path\", display_name=\"Path\", advanced=True),\n        StrInput(name=\"url\", display_name=\"URL\", advanced=True),\n        DropdownInput(\n            name=\"distance_func\",\n            display_name=\"Distance Function\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        StrInput(name=\"content_payload_key\", display_name=\"Content Payload Key\", value=\"page_content\", advanced=True),\n        StrInput(name=\"metadata_payload_key\", display_name=\"Metadata Payload Key\", value=\"metadata\", advanced=True),\n        *LCVectorStoreComponent.inputs,\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Qdrant:\n        qdrant_kwargs = {\n            \"collection_name\": self.collection_name,\n            \"content_payload_key\": self.content_payload_key,\n            \"metadata_payload_key\": self.metadata_payload_key,\n        }\n\n        server_kwargs = {\n            \"host\": self.host or None,\n            \"port\": int(self.port),  # Ensure port is an integer\n            \"grpc_port\": int(self.grpc_port),  # Ensure grpc_port is an integer\n            \"api_key\": self.api_key,\n            \"prefix\": self.prefix,\n            # Ensure timeout is an integer\n            \"timeout\": int(self.timeout) if self.timeout else None,\n            \"path\": self.path or None,\n            \"url\": self.url or None,\n        }\n\n        server_kwargs = {k: v for k, v in server_kwargs.items() if v is not None}\n\n        # Convert DataFrame to Data if needed using parent's method\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if not isinstance(self.embedding, Embeddings):\n            msg = \"Invalid embedding object\"\n            raise TypeError(msg)\n\n        if documents:\n            qdrant = Qdrant.from_documents(documents, embedding=self.embedding, **qdrant_kwargs, **server_kwargs)\n        else:\n            from qdrant_client import QdrantClient\n\n            client = QdrantClient(**server_kwargs)\n            qdrant = Qdrant(embeddings=self.embedding, client=client, **qdrant_kwargs)\n\n        return qdrant\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        return []\n"
              },
              "collection_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "DRAPE-final"
              },
              "content_payload_key": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Content Payload Key",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "content_payload_key",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "page_content"
              },
              "distance_func": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Distance Function",
                "dynamic": false,
                "info": "",
                "name": "distance_func",
                "options": [
                  "Cosine",
                  "Euclidean",
                  "Dot Product"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Cosine"
              },
              "embedding": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "grpc_port": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "gRPC Port",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "grpc_port",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 6334
              },
              "host": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Host",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "host",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "metadata_payload_key": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Metadata Payload Key",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "metadata_payload_key",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "metadata"
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "info": "Number of results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "path": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Path",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "port": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Port",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "port",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "prefix": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Prefix",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "prefix",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "url": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "URL",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "url",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "https://f1364366-6afb-4685-98f2-4310ebb1ee47.europe-west3-0.gcp.cloud.qdrant.io"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "QdrantVectorStoreComponent"
        },
        "dragging": false,
        "id": "QdrantVectorStoreComponent-MVkQJ",
        "measured": {
          "height": 445,
          "width": 320
        },
        "position": {
          "x": 1796.7203666886405,
          "y": 481.6426353821247
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 94.02796333113594,
      "y": 78.89999999999998,
      "zoom": 0.2
    }
  },
  "description": "database run locally only in main pc (share)",
  "endpoint_name": null,
  "folder_id": "9c6088be-450e-4630-9d1b-223bdb992e2c",
  "fs_path": null,
  "gradient": null,
  "icon": null,
  "icon_bg_color": null,
  "id": "95eebe87-e3c3-4db7-8506-ff91c6e615ef",
  "is_component": false,
  "locked": false,
  "mcp_enabled": true,
  "name": "base_dados ",
  "tags": [],
  "updated_at": "2025-06-17T16:48:55+00:00",
  "user_id": "2fe7d6f6-1bfe-4dfa-9cea-4d82003cfa10",
  "webhook": false
}